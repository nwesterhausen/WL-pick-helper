// Generated by https://quicktype.io

export interface EventSummary {
  boxscore: Boxscore;
  format: Format;
  gameInfo: GameInfo;
  lastFiveGames: LastFiveGame[];
  leaders: EventSummaryLeader[];
  injuries: EventSummaryInjury[];
  broadcasts: EventSummaryBroadcast[];
  predictor: Predictor;
  pickcenter: Pickcenter[];
  againstTheSpread: AgainstTheSpread[];
  odds: Odd[];
  header: Header;
  news: News;
  videos: Video[];
  ticketsInfo: TicketsInfo;
  standings: EventSummaryStandings;
}

export interface AgainstTheSpread {
  team: OpponentClass;
  records: any[];
}

export interface OpponentClass {
  id: string;
  uid: string;
  displayName: string;
  abbreviation: string;
  links: FullViewLinkElement[];
  logo: string;
}

export interface FullViewLinkElement {
  href: string;
  text: Text;
}

export enum Text {
  Clubhouse = 'Clubhouse',
  FullStandings = 'Full Standings',
  Gamecast = 'Gamecast',
  Schedule = 'Schedule',
}

export interface Boxscore {
  teams: TeamElement[];
}

export interface TeamElement {
  team: TeamTeam;
  statistics: Statistic[];
}

export interface Statistic {
  name: string;
  displayValue: string;
  label: string;
}

export interface TeamTeam {
  id: string;
  uid: string;
  slug: string;
  location: string;
  name: string;
  abbreviation: string;
  displayName: string;
  shortDisplayName: string;
  color: string;
  alternateColor: string;
  logo: string;
}

export interface EventSummaryBroadcast {
  type: PurpleType;
  station: string;
  market: Market;
  media: PurpleMedia;
  lang: string;
  region: string;
}

export interface Market {
  id: string;
  type: string;
}

export interface PurpleMedia {
  callLetters: string;
  name: string;
  shortName: string;
}

export interface PurpleType {
  id: string;
  shortName: string;
  longName: string;
  slug: string;
}

export interface Format {
  regulation: Overtime;
  overtime: Overtime;
}

export interface Overtime {
  periods: number;
  displayName: string;
  slug: string;
  clock: number;
}

export interface GameInfo {
  venue: Venue;
  weather: Weather;
}

export interface Venue {
  id: string;
  fullName: string;
  address: Address;
  capacity: number;
  grass: boolean;
  images: LogoElement[];
}

export interface Address {
  city: string;
  state: string;
  zipCode: string;
}

export interface LogoElement {
  href: string;
  width: number;
  height: number;
  alt: string;
  rel: Rel[];
  lastUpdated?: string;
}

export enum Rel {
  Dark = 'dark',
  Day = 'day',
  Default = 'default',
  Full = 'full',
  Interior = 'interior',
  Scoreboard = 'scoreboard',
}

export interface Weather {
  temperature: number;
  highTemperature: number;
  lowTemperature: number;
  conditionId: string;
  gust: number;
  precipitation: number;
  link: WeatherLink;
}

export interface WeatherLink {
  language?: string;
  rel: string[];
  href: string;
  text: string;
  shortText: string;
  isExternal: boolean;
  isPremium: boolean;
}

export interface Header {
  id: string;
  uid: string;
  season: Season;
  timeValid: boolean;
  competitions: Competition[];
  links: WeatherLink[];
  week: number;
  league: HeaderLeague;
}

export interface Competition {
  id: string;
  uid: string;
  date: string;
  neutralSite: boolean;
  conferenceCompetition: boolean;
  boxscoreAvailable: boolean;
  commentaryAvailable: boolean;
  liveAvailable: boolean;
  onWatchESPN: boolean;
  recent: boolean;
  boxscoreSource: string;
  playByPlaySource: string;
  competitors: Competitor[];
  status: Status;
  broadcasts: CompetitionBroadcast[];
}

export interface CompetitionBroadcast {
  type: FluffyType;
  market: Market;
  media: FluffyMedia;
  lang: string;
  region: string;
}

export interface FluffyMedia {
  shortName: string;
}

export interface FluffyType {
  id: string;
  shortName: string;
}

export interface Competitor {
  id: string;
  uid: string;
  order: number;
  homeAway: string;
  team: CompetitorTeam;
  record: Record[];
  possession: boolean;
}

export interface Record {
  type: string;
  summary: string;
  displayValue: string;
}

export interface CompetitorTeam {
  id: string;
  uid: string;
  location: string;
  name: string;
  nickname: string;
  abbreviation: string;
  displayName: string;
  color: string;
  alternateColor: string;
  logos: LogoElement[];
  links: LeagueLink[];
}

export interface LeagueLink {
  rel: string[];
  href: string;
  text: string;
}

export interface Status {
  type: StatusType;
}

export interface StatusType {
  id: string;
  name: string;
  state: string;
  completed: boolean;
  description: string;
  detail: string;
  shortDetail: string;
}

export interface HeaderLeague {
  id: string;
  uid: string;
  name: LeagueNameEnum;
  abbreviation: Abbreviation;
  slug: string;
  isTournament: boolean;
  links: LeagueLink[];
}

export enum Abbreviation {
  Nfl = 'NFL',
}

export enum LeagueNameEnum {
  NationalFootballLeague = 'National Football League',
}

export interface Season {
  year: number;
  type: number;
}

export interface EventSummaryInjury {
  team: OpponentClass;
  injuries: InjuryInjury[];
}

export interface InjuryInjury {
  status: string;
  date: string;
  athlete: InjuryAthlete;
  type: InjuryType;
}

export interface InjuryAthlete {
  id: string;
  uid: string;
  guid: string;
  lastName: string;
  fullName: string;
  displayName: string;
  shortName: string;
  links: LeagueLink[];
  headshot: Headshot;
  jersey: string;
  position: PurplePosition;
}

export interface Headshot {
  href: string;
  alt: string;
}

export interface PurplePosition {
  name: string;
  displayName: string;
  abbreviation: string;
}

export interface InjuryType {
  id: string;
  name: string;
  description: string;
  abbreviation: string;
}

export interface LastFiveGame {
  team: OpponentClass;
  events: Event[];
}

export interface Event {
  id: string;
  links: FullViewLinkElement[];
  week: number;
  atVs: AtVs;
  gameDate: string;
  score: string;
  homeTeamId: string;
  awayTeamId: string;
  homeTeamScore: string;
  awayTeamScore: string;
  homeAggregateScore: string;
  awayAggregateScore: string;
  homeShootoutScore: string;
  awayShootoutScore: string;
  gameResult: GameResult;
  opponent: OpponentClass;
  opponentLogo: string;
  leagueName: LeagueNameEnum;
  leagueAbbreviation: Abbreviation;
}

export enum AtVs {
  Empty = '@',
  Vs = 'vs',
}

export enum GameResult {
  Any = 'Any',
  L = 'L',
  Pa = 'PA',
  Pct = 'PCT',
  Pf = 'PF',
  T = 'T',
  W = 'W',
}

export interface EventSummaryLeader {
  team: OpponentClass;
  leaders: PurpleLeader[];
}

export interface PurpleLeader {
  name: string;
  displayName: string;
  leaders: FluffyLeader[];
}

export interface FluffyLeader {
  displayValue: string;
  athlete: LeaderAthlete;
}

export interface LeaderAthlete {
  id: string;
  uid: string;
  guid: string;
  lastName: string;
  fullName: string;
  displayName: string;
  shortName: string;
  links: LeagueLink[];
  headshot: Headshot;
  jersey: string;
  position: FluffyPosition;
}

export interface FluffyPosition {
  abbreviation: string;
}

export interface News {
  header: string;
  link: WeatherLink;
  articles: Article[];
}

export interface Article {
  images: ArticleImage[];
  description: string;
  published: string;
  type: string;
  premium: boolean;
  links: ArticleLinks;
  lastModified: string;
  categories: Category[];
  headline: string;
  byline?: string;
}

export interface Category {
  id?: number;
  description?: string;
  type: CategoryType;
  sportId?: number;
  topicId?: number;
  createDate?: string;
  leagueId?: number;
  league?: CategoryLeague;
  uid?: string;
  teamId?: number;
  team?: CategoryTeam;
  athleteId?: number;
  athlete?: CategoryAthlete;
  guid?: string;
}

export interface CategoryAthlete {
  id: number;
  description: string;
  links: AthleteLinks;
}

export interface AthleteLinks {
  api: PurpleAPI;
  web: PurpleAPI;
  mobile: PurpleAPI;
}

export interface PurpleAPI {
  athletes: ArtworkClass;
}

export interface ArtworkClass {
  href?: string;
}

export interface CategoryLeague {
  id: number;
  description: string;
  links: LeagueLinks;
}

export interface LeagueLinks {
  api: FluffyAPI;
  web: FluffyAPI;
  mobile: FluffyAPI;
}

export interface FluffyAPI {
  leagues: ArtworkClass;
}

export interface CategoryTeam {
  id: number;
  description: string;
  links: TeamLinks;
}

export interface TeamLinks {
  api: TentacledAPI;
  web: TentacledAPI;
  mobile: TentacledAPI;
}

export interface TentacledAPI {
  teams: ArtworkClass;
}

export enum CategoryType {
  Athlete = 'athlete',
  GUID = 'guid',
  League = 'league',
  Team = 'team',
  Topic = 'topic',
}

export interface ArticleImage {
  name: string;
  width: number;
  id?: number;
  credit?: string;
  type?: string;
  url: string;
  height: number;
  alt?: string;
  caption?: string;
}

export interface ArticleLinks {
  api: StickyAPI;
  web: PurpleWeb;
  mobile?: ArtworkClass;
}

export interface StickyAPI {
  news: ArtworkClass;
  self: ArtworkClass;
}

export interface PurpleWeb {
  href: string;
  short: ArtworkClass;
}

export interface Odd {
  provider: Provider;
  bettingOdds: BettingOdds;
}

export interface BettingOdds {
  homeTeam: BettingOddsAwayTeam;
  awayTeam: BettingOddsAwayTeam;
  teamOdds: { [key: string]: TeamOdd };
}

export interface BettingOddsAwayTeam {
  $ref: string;
}

export interface TeamOdd {
  oddId: string;
  value: string;
  betSlipUrl: string;
}

export interface Provider {
  id: string;
  name: string;
  priority: number;
}

export interface Pickcenter {
  provider: Provider;
  details: string;
  overUnder: number;
  spread: number;
  awayTeamOdds: TeamOdds;
  homeTeamOdds: TeamOdds;
  links: any[];
}

export interface TeamOdds {
  favorite: boolean;
  underdog: boolean;
  moneyLine: number;
  spreadOdds: number;
  teamId: string;
  winPercentage?: number;
  averageScore?: number;
  spreadRecord?: SpreadRecord;
}

export interface SpreadRecord {
  wins: number;
  losses: number;
  pushes: number;
  summary: string;
}

export interface Predictor {
  header: string;
  homeTeam: PredictorAwayTeam;
  awayTeam: PredictorAwayTeam;
}

export interface PredictorAwayTeam {
  id: string;
  gameProjection: string;
  teamChanceLoss: string;
  teamChanceTie: string;
}

export interface EventSummaryStandings {
  fullViewLink: FullViewLinkElement;
  groups: Group[];
}

export interface Group {
  standings: GroupStandings;
  header: string;
  href: string;
}

export interface GroupStandings {
  entries: Entry[];
}

export interface Entry {
  team: string;
  link: string;
  id: string;
  uid: string;
  stats: Stat[];
  logo: LogoElement[];
}

export interface Stat {
  name: StatName;
  displayName?: DisplayName;
  shortDisplayName?: GameResult;
  description?: Description;
  abbreviation: GameResult;
  type: StatType;
  value?: number;
  displayValue: string;
  id?: string;
  summary?: string;
}

export enum Description {
  Losses = 'Losses',
  TeamSCurrentWinLossRecord = "Team's current Win-Loss record",
  Ties = 'Ties',
  TotalPointsAgainst = 'Total Points Against',
  TotalPointsFor = 'Total Points For',
  WinningPercentage = 'Winning Percentage',
}

export enum DisplayName {
  Losses = 'Losses',
  PointsAgainst = 'Points Against',
  PointsFor = 'Points For',
  Ties = 'Ties',
  WINS = 'Wins',
  WinPercentage = 'Win Percentage',
}

export enum StatName {
  AllSplits = 'All Splits',
  Losses = 'losses',
  PointsAgainst = 'pointsAgainst',
  PointsFor = 'pointsFor',
  Ties = 'ties',
  WINS = 'wins',
  WinPercent = 'winPercent',
}

export enum StatType {
  Losses = 'losses',
  Pointsagainst = 'pointsagainst',
  Pointsfor = 'pointsfor',
  Ties = 'ties',
  Total = 'total',
  WINS = 'wins',
  Winpercent = 'winpercent',
}

export interface TicketsInfo {
  tickets: Ticket[];
  seatSituation: { [key: string]: string };
}

export interface Ticket {
  ticketName: string;
  ticketLink: string;
  type: TicketType;
}

export enum TicketType {
  Event = 'event',
  League = 'league',
  Team = 'team',
}

export interface Video {
  source: string;
  id: number;
  headline: string;
  description: string;
  ad: Ad;
  tracking: Tracking;
  cerebroId: string;
  lastModified: string;
  originalPublishDate: string;
  timeRestrictions: TimeRestrictions;
  deviceRestrictions: DeviceRestrictions;
  duration: number;
  thumbnail: string;
  links: VideoLinks;
}

export interface Ad {
  sport: string;
  bundle: string;
}

export interface DeviceRestrictions {
  type: string;
  devices: string[];
}

export interface VideoLinks {
  api: IndigoAPI;
  web: FluffyWeb;
  source: Source;
  mobile: LinksMobile;
}

export interface IndigoAPI {
  self: ArtworkClass;
  artwork: ArtworkClass;
}

export interface LinksMobile {
  alert: ArtworkClass;
  source: ArtworkClass;
  href: string;
  streaming: ArtworkClass;
  progressiveDownload: ArtworkClass;
}

export interface Source {
  mezzanine: ArtworkClass;
  flash: ArtworkClass;
  hds: ArtworkClass;
  HLS: HLS;
  HD: ArtworkClass;
  full: ArtworkClass;
  href: string;
}

export interface HLS {
  href: string;
  HD: ArtworkClass;
}

export interface FluffyWeb {
  href: string;
  short: ArtworkClass;
  self: ArtworkClass;
}

export interface TimeRestrictions {
  embargoDate: string;
  expirationDate: string;
}

export interface Tracking {
  sportName: string;
  leagueName: string;
  coverageType: string;
  trackingName: string;
  trackingId: string;
}
